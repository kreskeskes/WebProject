// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductService.Data;

#nullable disable

namespace ProductService.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20241028043147_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeGenderGroup")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Styles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e95b4df5-8f24-4d1a-9b0a-0eebc6a9e1f3"),
                            AgeGenderGroup = 0,
                            Brand = "CoolBrand",
                            CategoryIds = "[\"78c27d10-b5ec-435d-ae90-60211124db26\",\"b75f9050-7a85-4d1e-bd86-63e1fa4bdb54\"]",
                            Colors = "[\"Black\",\"White\"]",
                            Description = "A cool graphic t-shirt.",
                            Length = "Regular",
                            Materials = "{\"Cotton\":50.0,\"Polyester\":50.0}",
                            Name = "Graphic Tee",
                            Price = 29.99m,
                            ProductTypeId = new Guid("7f7e91a5-1b2b-4c6d-a99f-d1f2e5c79f35"),
                            Sizes = "[3,4]",
                            Styles = "[\"Casual\",\"Streetwear\"]"
                        },
                        new
                        {
                            Id = new Guid("4a1d0cfc-c4e1-4b4e-b8a7-3fcab13b6cf9"),
                            AgeGenderGroup = 1,
                            Brand = "Fashionista",
                            CategoryIds = "[\"78c27d10-b5ec-435d-ae90-60211124db26\",\"b75f9050-7a85-4d1e-bd86-63e1fa4bdb54\"]",
                            Colors = "[\"Red\",\"Blue\"]",
                            Description = "A stylish summer dress.",
                            Length = "Knee-length",
                            Materials = "{\"Cotton\":20.0,\"Silk\":80.0}",
                            Name = "Summer Dress",
                            Price = 49.99m,
                            ProductTypeId = new Guid("15f1fbdc-9a24-4e9b-a47e-ecf8f95c5a43"),
                            Sizes = "[2,3]",
                            Styles = "[\"Elegant\",\"Casual\"]"
                        },
                        new
                        {
                            Id = new Guid("e884afb9-b3b5-40b4-9776-cdafeb392382"),
                            AgeGenderGroup = 1,
                            Brand = "Elegant Designs",
                            CategoryIds = "[\"f5c8a789-1234-4abc-9def-456789012345\"]",
                            Colors = "[\"Gold\",\"Silver\"]",
                            Description = "Beautifully crafted gold earrings for special occasions.",
                            Length = "N/A",
                            Materials = "{\"Gold\":70.0,\"Silver\":30.0}",
                            Name = "Elegant Necklace",
                            Price = 79.99m,
                            ProductTypeId = new Guid("efd580ad-6076-4008-a2bc-03ff97507bb6"),
                            Sizes = "[9]",
                            Styles = "[\"Elegant\",\"Formal\"]"
                        },
                        new
                        {
                            Id = new Guid("2dd55f91-1655-42d6-9c2b-7f1a1bfa6184"),
                            AgeGenderGroup = 1,
                            Brand = "Daily Chic",
                            CategoryIds = "[\"f5c8a789-1234-4abc-9def-456789012345\"]",
                            Colors = "[\"Rose Gold\",\"White\"]",
                            Description = "Simple and stylish stud earrings for everyday wear.",
                            Length = "N/A",
                            Materials = "{\"Rose Gold\":50.0,\"Plastic\":50.0}",
                            Name = "Casual Stud Earrings",
                            Price = 29.99m,
                            ProductTypeId = new Guid("28b1c40d-56c0-4b39-b9b4-f0b6e1c5b2c7"),
                            Sizes = "[9]",
                            Styles = "[\"Casual\",\"Everyday\"]"
                        });
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b75f9050-7a85-4d1e-bd86-63e1fa4bdb54"),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("f4d38c7a-14d2-4f2c-8738-df1d6b57c4bc"),
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = new Guid("f5c8a789-1234-4abc-9def-456789012345"),
                            Name = "Jewelry"
                        },
                        new
                        {
                            Id = new Guid("78c27d10-b5ec-435d-ae90-60211124db26"),
                            Name = "Summer clothing"
                        });
                });

            modelBuilder.Entity("ProductService.Entities.ProductProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProductCategories");
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f7e91a5-1b2b-4c6d-a99f-d1f2e5c79f35"),
                            Name = "T-Shirt"
                        },
                        new
                        {
                            Id = new Guid("15f1fbdc-9a24-4e9b-a47e-ecf8f95c5a43"),
                            Name = "Dress"
                        },
                        new
                        {
                            Id = new Guid("28b1c40d-56c0-4b39-b9b4-f0b6e1c5b2c7"),
                            Name = "Earrings"
                        },
                        new
                        {
                            Id = new Guid("efd580ad-6076-4008-a2bc-03ff97507bb6"),
                            Name = "Necklace"
                        });
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProductService.Entities.ProductProductCategory", b =>
                {
                    b.HasOne("ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
